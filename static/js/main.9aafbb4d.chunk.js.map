{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","item","todoItems","tocart","onChangeHandler","bind","addData","delete","cart","rcart","event","inputVal","target","value","this","setState","itemInstance","push","id","splice","name","itemList","map","e","i","key","onClick","cartList","className","type","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAgGeA,E,kDA7FX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,KAAK,GACLC,UAAU,GACVC,OAAO,IAEX,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,gBACd,EAAKG,KAAO,EAAKA,KAAKH,KAAV,gBACZ,EAAKI,MAAQ,EAAKA,MAAMJ,KAAX,gBAXC,E,4DAaFK,GACZ,IAAIC,EAAWD,EAAME,OAAOC,MAC5BC,KAAKC,SAAS,CACVd,KAAKU,M,gCAKT,IAAIA,EAAWG,KAAKd,MAAMC,KACtBe,EAAeF,KAAKd,MAAME,UAC9Bc,EAAaC,KAAKN,GAClBG,KAAKC,SAAS,CACVb,UAAUc,EACVf,KAAK,O,6BAONS,GACH,IAAIQ,EAAKR,EAAME,OAAOM,GAClBF,EAAeF,KAAKd,MAAME,UAC9Bc,EAAaG,OAAOD,EAAG,GACvBJ,KAAKC,SAAS,CACVb,UAAUc,M,2BAMbN,GACD,IAAIU,EAAOV,EAAME,OAAOM,GAEpBF,EAAeF,KAAKd,MAAMG,OAC9Ba,EAAaC,KAAKG,GAClBN,KAAKC,SAAS,CACVZ,OAAOa,M,4BAQTN,GACF,IAAIQ,EAAKR,EAAME,OAAOM,GAClBF,EAAeF,KAAKd,MAAMG,OAC9Ba,EAAaG,OAAOD,EAAG,GACvBJ,KAAKC,SAAS,CACVZ,OAAOa,M,+BAIN,IAAD,OACAK,EAAWP,KAAKd,MAAME,UAAUoB,KAAI,SAACC,EAAEC,GAAH,OACpC,wBAAIC,IAAKD,GAAID,EAAb,IAAgB,4BAAQG,QAAS,EAAKnB,OAAQW,GAAIM,GAAlC,OAAhB,IAAkE,4BAAQE,QAAS,EAAKlB,KAAMU,GAAMK,GAAlC,mBAElEI,EAAWb,KAAKd,MAAMG,OAAOmB,KAAI,SAACC,EAAEC,GAAH,OACjC,wBAAIC,IAAOD,GAAID,EAAf,KAAmB,4BAAQG,QAAS,EAAKjB,MAAOS,GAAMM,GAAnC,UAAnB,QAEJ,OACI,6BACI,yBAAKI,UAAU,WACf,yBAAKA,UAAU,QACX,4BAAKP,GAEL,uCACA,4BAAKM,IAET,yBAAKC,UAAU,UAAf,iBACkB,2BAAOC,KAAK,OAAOhB,MAAOC,KAAKd,MAAMC,KAAM6B,SAAUhB,KAAKV,kBAExE,4BAAQsB,QAASZ,KAAKR,SAAtB,a,GAvFDyB,aCeJC,E,uKAXb,OACE,yBAAKJ,UAAU,OACb,6CACA,kBAAC,EAAD,W,GALYG,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9aafbb4d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Todo extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            item:\"\",\r\n            todoItems:[],\r\n            tocart:[]\r\n        }\r\n        this.onChangeHandler = this.onChangeHandler.bind(this);\r\n        this.addData = this.addData.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n        this.cart = this.cart.bind(this);\r\n        this.rcart = this.rcart.bind(this);\r\n    }\r\n    onChangeHandler(event){\r\n        var inputVal = event.target.value;\r\n        this.setState({\r\n            item:inputVal\r\n        })\r\n\r\n    }\r\n    addData(){\r\n        var inputVal = this.state.item;\r\n        var itemInstance = this.state.todoItems;\r\n        itemInstance.push(inputVal);\r\n        this.setState({\r\n            todoItems:itemInstance,\r\n            item:\"\"\r\n            \r\n        })\r\n        //console.log(this.state.todoItems);\r\n \r\n\r\n    }\r\n    delete(event){\r\n        var id = event.target.id;\r\n        var itemInstance = this.state.todoItems;\r\n        itemInstance.splice(id,1);\r\n        this.setState({\r\n            todoItems:itemInstance\r\n            \r\n        })\r\n\r\n\r\n    }\r\n    cart(event){\r\n        var name = event.target.id;\r\n        //console.log(name);\r\n        var itemInstance = this.state.tocart;\r\n        itemInstance.push(name);\r\n        this.setState({\r\n            tocart:itemInstance,\r\n            \r\n            \r\n        })\r\n        //console.log(this.state.tocart);\r\n\r\n\r\n    }\r\n    rcart(event){\r\n        var id = event.target.id;\r\n        var itemInstance = this.state.tocart;\r\n        itemInstance.splice(id,1);\r\n        this.setState({\r\n            tocart:itemInstance\r\n            \r\n        })\r\n    }\r\n    render(){\r\n        var itemList = this.state.todoItems.map((e,i)=>\r\n            <li key={i}>{e} <button onClick={this.delete} id={i}>del</button> <button onClick={this.cart} id = {e}>add_to_cart</button></li>\r\n        )\r\n        var cartList = this.state.tocart.map((e,i)=>\r\n            <li key = {i}>{e}  <button onClick={this.rcart} id = {i}>Remove</button> </li>\r\n        )\r\n        return(\r\n            <div>\r\n                <div className='header'></div>\r\n                <div className='body'>\r\n                    <ul>{itemList}</ul>\r\n\r\n                    <h3>My Cart</h3>\r\n                    <ul>{cartList}</ul>\r\n                </div>\r\n                <div className='footer'>\r\n                    Add New Item: <input type=\"text\" value={this.state.item} onChange={this.onChangeHandler} />\r\n                    {/* <p>{this.state.item}</p> */}\r\n                    <button onClick={this.addData}>Add</button>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Todo;","import React, { Component } from 'react';\nimport './App.css';\nimport Todo from './Todo';\n\nclass App extends Component {\n  render(){\n  return (\n    <div className=\"App\">\n      <h1>Shopping Cart</h1>\n      <Todo/>\n\n\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}